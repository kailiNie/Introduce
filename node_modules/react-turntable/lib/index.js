"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.easeOut = easeOut;

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactDom = require("react-dom");

var _reactDom2 = _interopRequireDefault(_reactDom);

var _classnames = require("classnames");

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author Jinke.Li
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 1.2.2
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @link //https://juejin.im/post/5992b6065188257dd3664dbc
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

function easeOut(t, b, c, d) {
    if ((t /= d / 2) < 1) return c / 2 * t * t + b;
    return -c / 2 * (--t * (t - 2) - 1) + b;
}

var ReactTurntable = function (_PureComponent) {
    _inherits(ReactTurntable, _PureComponent);

    function ReactTurntable(props) {
        _classCallCheck(this, ReactTurntable);

        var _this = _possibleConstructorReturn(this, (ReactTurntable.__proto__ || Object.getPrototypeOf(ReactTurntable)).call(this, props));

        _this.state = {
            isRotate: false,
            startRotate: 0
        };

        _this.rotateTurntable = function () {
            return _this.__rotateTurntable__REACT_HOT_LOADER__.apply(_this, arguments);
        };

        _this.getSelectedPrize = function () {
            return _this.__getSelectedPrize__REACT_HOT_LOADER__.apply(_this, arguments);
        };

        _this.onStartRotate = function () {
            return _this.__onStartRotate__REACT_HOT_LOADER__.apply(_this, arguments);
        };

        _this.canvas = null;
        _this.ctx = null;
        _this.animateId = null;
        return _this;
    }

    _createClass(ReactTurntable, [{
        key: "__onStartRotate__REACT_HOT_LOADER__",
        value: function __onStartRotate__REACT_HOT_LOADER__() {
            var _this2 = this;

            var _props = this.props,
                speed = _props.speed,
                duration = _props.duration;

            if (this.state.isRotate) return;
            this.setState({ isRotate: true }, function () {
                _this2.rotateTime = 0;
                _this2.rotateAllTime = Math.random() * 5 + duration;
                _this2.rotateChange = Math.random() * 10 + speed / 100;
                _this2.rotateTurntable();
            });
        }
    }, {
        key: "__getSelectedPrize__REACT_HOT_LOADER__",
        value: function __getSelectedPrize__REACT_HOT_LOADER__() {
            var startAngle = this.startRotate * 180 / Math.PI,
                awardAngle = this.awardRotate * 180 / Math.PI,
                pointerAngle = 90,
                overAngle = (startAngle + pointerAngle) % 360,
                restAngle = 360 - overAngle,
                index = Math.floor(restAngle / awardAngle);

            return this.prizes[index];
        }
    }, {
        key: "__rotateTurntable__REACT_HOT_LOADER__",
        value: function __rotateTurntable__REACT_HOT_LOADER__() {
            this.rotateTime += 20;
            if (this.rotateTime >= this.rotateAllTime) {
                var prize = this.getSelectedPrize();
                this.setState({ isRotate: false });
                this.props.onComplete && this.props.onComplete(prize);
                return;
            }
            var _rotateChange = (this.rotateChange - easeOut(this.rotateTime, 0, this.rotateChange, this.rotateAllTime)) * (Math.PI / 180);
            this.startRotate += _rotateChange;
            this.drawTurntable();

            this.animateId = requestAnimationFrame(this.rotateTurntable);
        }
    }, {
        key: "render",
        value: function render() {
            var _this3 = this;

            var _props2 = this.props,
                clickText = _props2.clickText,
                width = _props2.width,
                height = _props2.height;

            var styles = { width: width, height: height };
            return _react2.default.createElement(
                "div",
                { className: "react-turntable-section", key: "react-turntable-section", style: styles },
                _react2.default.createElement("canvas", { id: "react-turntable-section-canvas", ref: function ref(node) {
                        return _this3.canvas = node;
                    } }),
                Object.is(typeof clickText === "undefined" ? "undefined" : _typeof(clickText), 'object') ? _react2.default.createElement(
                    "div",
                    { onClick: this.onStartRotate },
                    clickText
                ) : _react2.default.createElement(
                    "div",
                    { className: "react-turntable-section-btn", onClick: this.onStartRotate },
                    clickText
                )
            );
        }
    }, {
        key: "drawTurntable",
        value: function drawTurntable() {
            var ctx = this.ctx;
            ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
            var _props3 = this.props,
                primaryColor = _props3.primaryColor,
                secondaryColor = _props3.secondaryColor,
                _props3$fontStyle = _props3.fontStyle,
                fontVertical = _props3$fontStyle.fontVertical,
                fontWeight = _props3$fontStyle.fontWeight,
                fontFamily = _props3$fontStyle.fontFamily,
                size = _props3$fontStyle.size,
                color = _props3$fontStyle.color;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {

                for (var _iterator = this.prizes.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var _step$value = _slicedToArray(_step.value, 2),
                        i = _step$value[0],
                        prize = _step$value[1];

                    var _currentStartRotate = this.startRotate + this.awardRotate * i;
                    var _currentEndRotate = _currentStartRotate + this.awardRotate;
                    this.ctx.save();
                    i % 2 === 0 ? ctx.fillStyle = primaryColor : ctx.fillStyle = secondaryColor;
                    ctx.beginPath();
                    ctx.arc(this.centerX, this.centerY, this.R, _currentStartRotate, _currentEndRotate, false);
                    ctx.arc(this.centerX, this.centerY, this.INSERT_R, _currentEndRotate, _currentStartRotate, true);
                    ctx.fill();
                    ctx.closePath();
                    ctx.restore();

                    ctx.save();
                    ctx.beginPath();
                    ctx.font = fontWeight + " " + (/.*px$/.test(size) ? size : size + 'px') + " " + fontFamily;
                    ctx.fillStyle = color;
                    ctx.textBaseline = "middle";
                    var currentX = Math.cos(_currentStartRotate + this.awardRotate / 2) * this.TEXT_R;
                    var currentY = Math.sin(_currentStartRotate + this.awardRotate / 2) * this.TEXT_R;

                    ctx.translate(this.centerX + currentX, this.centerY + currentY);
                    ctx.rotate(_currentStartRotate + this.awardRotate / 2 + Math.PI / 2);

                    var maxFontWidth = currentY / (this.TEXT_R / 2);

                    var _ctx$measureText = ctx.measureText(prize),
                        fontWidth = _ctx$measureText.width;

                    if (fontVertical === true) {
                        ctx.translate(0, Math.min(fontWidth, 25));
                        ctx.rotate(90 / 180 * Math.PI);
                    }

                    ctx.fillText(prize, -fontWidth / 2, 0);

                    ctx.closePath();
                    ctx.restore();
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
    }, {
        key: "destroyContext",
        value: function destroyContext() {
            window.cancelAnimationFrame(this.animateId);
            delete this.canvas;
            delete this.ctx;
            delete this.prizes;
            delete this.startRotate;
            delete this.rotateTime;
            delete this.rotateAllTime;
            delete this.rotateChange;
            delete this.awardRotate;
            delete this.centerX;
            delete this.centerY;
            delete this.R;
            delete this.TEXT_R;
            delete this.INSERT_R;
        }
    }, {
        key: "compatibilityFrame",
        value: function compatibilityFrame() {
            window.requestAnimFrame = function () {
                return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function (callback) {
                    return window.setTimeout(callback, 1000 / 60);
                };
            }();
            window.cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame;
        }
    }, {
        key: "componentwillreceiveprops",
        value: function componentwillreceiveprops(nextProps) {
            console.log(nextProps);
        }
    }, {
        key: "componentWillMount",
        value: function componentWillMount() {
            if (this.props.prizes.length < 2) throw new Error('options prizes It needs to be an array , Not less than two');
        }
    }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
            this.destroyContext();
        }
    }, {
        key: "componentDidMount",
        value: function componentDidMount() {
            this.compatibilityFrame();
            var _props4 = this.props,
                width = _props4.width,
                height = _props4.height,
                speed = _props4.speed,
                duration = _props4.duration,
                prizes = _props4.prizes,
                clickText = _props4.clickText;

            this.prizes = prizes;
            this.startRotate = 0;
            this.rotateTime = 0;
            this.rotateAllTime = 0;
            this.rotateChange = 0;

            this.ctx = this.canvas.getContext('2d');
            this.canvas.width = width;
            this.canvas.height = height;

            this.awardRotate = Math.PI * 2 / prizes.length;

            this.centerX = this.canvas.width / 2;
            this.centerY = this.canvas.height / 2;
            this.R = this.canvas.width / 2 - 20;
            this.TEXT_R = this.R - 50;
            this.INSERT_R = 0;
            this.drawTurntable();
        }
    }]);

    return ReactTurntable;
}(_react.PureComponent);

ReactTurntable.defaultProps = {
    width: 500,
    height: 500,
    speed: 1000, //旋转速度
    duration: 5000, //旋转时间
    prizes: [],
    clickEle: "",
    clickText: "Click",
    primaryColor: "#83AF9B",
    secondaryColor: "#C8C8A9",
    fontStyle: {
        color: "#fff",
        size: "14px",
        fontWeight: "bold",
        fontVertical: false,
        fontFamily: "Microsoft YaHei"
    }
};
ReactTurntable.propTypes = {
    width: _propTypes2.default.number.isRequired,
    height: _propTypes2.default.number.isRequired,
    prizes: _propTypes2.default.array.isRequired,
    clickText: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]),
    primaryColor: _propTypes2.default.string,
    secondaryColor: _propTypes2.default.string,
    speed: _propTypes2.default.number,
    duration: _propTypes2.default.number,
    onComplete: _propTypes2.default.func,
    fontVertical: _propTypes2.default.bool,
    fontStyle: _propTypes2.default.object
};
var _default = ReactTurntable;
exports.default = _default;
;

var _temp = function () {
    if (typeof __REACT_HOT_LOADER__ === 'undefined') {
        return;
    }

    __REACT_HOT_LOADER__.register(easeOut, "easeOut", "src/index.js");

    __REACT_HOT_LOADER__.register(ReactTurntable, "ReactTurntable", "src/index.js");

    __REACT_HOT_LOADER__.register(_default, "default", "src/index.js");
}();

;